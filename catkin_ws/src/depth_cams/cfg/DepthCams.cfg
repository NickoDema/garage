#!/usr/bin/env python
PACKAGE = "depth_cams"

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()


min_disparity_help = "Minimum possible disparity value. Normally, it is zero but sometimes rectification algorithms can shift images, " + \
                     "so this parameter needs to be adjusted accordingly"
gen.add("min_disparity",    int_t, 0, min_disparity_help,    -1, -20, 4)


disparity_num_help = "Maximum disparity minus minimum disparity, In the current implementation, this parameter must be divisible by 16"
gen.add("disparity_num",    int_t, 0, disparity_num_help,    10,  1, 30)


block_size_help = "Matched block size. It must be an odd number >=1 . Normally, it should be somewhere in the 3..11 range"
gen.add("block_size",       int_t, 0, block_size_help,        5,  3, 20)


penalty_1_help = "Penalty on the disparity change by plus or minus 1 between neighbor pixels"
gen.add("penalty_1",    int_t,         0, penalty_1_help, 100,   0,  6000)


penalty_2_help = "Penalty on the disparity change by more than 1 between neighbor pixels. P2 > P1 is required"
gen.add("penalty_2",    int_t,         0, penalty_2_help, 1000,  0,  6000)


disp_12_max_diff_help = "Maximum allowed difference (in integer pixel units) in the left-right disparity check. Set it to a non-positive value to disable"
gen.add("disp_12_max_diff",    int_t,         0, disp_12_max_diff_help, 32,  -1,  100)


pre_filter_cap_help = "Truncation value for the prefiltered image pixels. The algorithm first computes x-derivative at each pixel " + \
                      "and clips its value by [-preFilterCap, preFilterCap] interval. The result values are passed to the " + \
                      "Birchfield-Tomasi pixel cost function"
gen.add("pre_filter_cap",    int_t,    0, pre_filter_cap_help, 0,  0,  50)


uniqueness_ratio_help = "Margin in percentage by which the best (minimum) computed cost function value should win the second best value to " + \
                        "consider the found match correct. Normally, a value within the 5-15 range is good enough"
gen.add("uniqueness_ratio",    int_t,    0, uniqueness_ratio_help, 15,  0,  30)


speckle_window_size_help = "Maximum size of smooth disparity regions to consider their noise speckles and invalidate. Set it to 0 to disable " + \
                           "speckle filtering. Otherwise, set it somewhere in the 50-200 range"
gen.add("speckle_window_size",    int_t,    0, speckle_window_size_help, 1000,  0,  2000)


speckle_range_help = "Maximum disparity variation within each connected component. If you do speckle filtering, set the parameter to a positive " + \
                     "value, it will be implicitly multiplied by 16. Normally, 1 or 2 is good enough"
gen.add("speckle_range",    int_t,    0, speckle_range_help, 16,  0,  30)

sgbm_mode_enum = gen.enum([ gen.const("MODE_SGBM",      int_t, 0, "5-dir mode"),
                            gen.const("MODE_HH",        int_t, 1, "8-dir mode"),
                            gen.const("MODE_SGBM_3WAY", int_t, 2, "3-dir mode, the fastest one")],
                            "++++++")

gen.add("sgbm_mode", int_t, 0, "--------", 1, 0, 2, edit_method=sgbm_mode_enum)

exit(gen.generate(PACKAGE, "depth_cams", "DepthCams"))
